#!/bin/bash
# ========================================
# ÂÖ±ÈÄöËµ∑Âãï„Çπ„ÇØ„É™„Éó„ÉàÈñ¢Êï∞
# ========================================
# run-single.sh „Å® run-cluster.sh „ÅßÂÖ±ÈÄöÂà©Áî®„Åï„Çå„ÇãÈñ¢Êï∞Áæ§

# ÂÖ±ÈÄöÈñ¢Êï∞„ÅÆË™≠„ÅøËæº„Åø
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. "$SCRIPT_DIR/common.sh"

# ========================================
# „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö
# ========================================
setup_defaults() {
    COMMAND="${COMMAND:-up}"
    DB_ONLY="${DB_ONLY:-false}"
    SHOW_HELP="${SHOW_HELP:-false}"
    DETACHED="${DETACHED:--d}"
    ATTACH_MODE="${ATTACH_MODE:-false}"
    AUTO_DEPLOY="${AUTO_DEPLOY:-true}"
}

# ========================================
# Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
# ========================================
setup_environment() {
    export DOCKER_COMMAND_API_PORT="${DOCKER_COMMAND_API_PORT:-50501}"
    export DOCKER_QUERY_API_PORT="${DOCKER_QUERY_API_PORT:-50502}"
    export DOCKER_POSTGRES_PORT="${DOCKER_POSTGRES_PORT:-50504}"
    export DOCKER_LOCALSTACK_PORT="${DOCKER_LOCALSTACK_PORT:-50503}"
    export DOCKER_DYNAMODB_ADMIN_PORT="${DOCKER_DYNAMODB_ADMIN_PORT:-50505}"
    export DOCKER_PGADMIN_PORT="${DOCKER_PGADMIN_PORT:-50506}"
}

# ========================================
# ÂºïÊï∞Âá¶ÁêÜ
# ========================================
parse_arguments() {
    # Á¨¨‰∏ÄÂºïÊï∞„Åå„Ç≥„Éû„É≥„Éâ„ÅÆÂ†¥Âêà„ÅØÂèñÂæó
    if [[ "$1" =~ ^(up|down|logs)$ ]]; then
        COMMAND=$1
        shift
    fi

    # „Åù„ÅÆ‰ªñ„ÅÆÂºïÊï∞Âá¶ÁêÜ
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            --attach) DETACHED=""; ATTACH_MODE=true; shift ;;
            --db-only) DB_ONLY=true; shift ;;
            --no-deploy) AUTO_DEPLOY=false; shift ;;
            --deploy) AUTO_DEPLOY=true; shift ;;
            -h|--help) SHOW_HELP=true; shift ;;
            *)
                # logs„Ç≥„Éû„É≥„Éâ„ÅÆÂ†¥Âêà„ÅØËøΩÂä†„ÅÆÂºïÊï∞„ÇíË®±ÂèØ
                if [ "$COMMAND" = "logs" ]; then
                    break
                else
                    echo "Unknown option: $1"
                    exit 1
                fi
                ;;
        esac
    done
}

# ========================================
# down„Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ
# ========================================
handle_down_command() {
    echo "üõë Stopping services..."
    shift  # ÊúÄÂàù„ÅÆÂºïÊï∞Ôºàcompose_filesÔºâ„ÇíÈô§Âéª
    docker compose "$@" down
    echo "‚úÖ Services stopped"
    exit 0
}

# ========================================
# logs„Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ
# ========================================
handle_logs_command() {
    echo "üìú Showing service logs..."
    shift  # ÊúÄÂàù„ÅÆÂºïÊï∞Ôºàcompose_filesÔºâ„ÇíÈô§Âéª
    docker compose "$@" logs
    exit 0
}

# ========================================
# DB_ONLY„É¢„Éº„ÉâÂÆüË°å
# ========================================
run_db_only_mode() {
    echo "üóÑÔ∏è  Starting Database Services Only..."
    echo "   (DBs run in Docker, APIs will be started separately)"
    echo ""

    # Êó¢Â≠ò„ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÇíÂÅúÊ≠¢„ÉªÂâäÈô§
    echo "üßπ Cleaning up existing containers..."
    docker compose -f docker-compose-common.yml down

    # „Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Éº„Éì„Çπ„ÅÆ„ÅøËµ∑Âãï
    echo "üöÄ Starting database services..."
    if [ "$ATTACH_MODE" = true ]; then
        echo "üìé Running in foreground mode (Ctrl+C to stop)..."
        docker compose -f docker-compose-common.yml up "$@" localstack dynamodb-setup dynamodb-admin postgres flyway
    else
        docker compose -f docker-compose-common.yml up $DETACHED "$@" localstack dynamodb-setup dynamodb-admin postgres flyway

        echo "‚è≥ Waiting for services to be ready..."
        sleep 10

        # „Çµ„Éº„Éì„Çπ„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
        check_db_services

        echo ""
        echo "üéâ Database services are running!"
        echo ""
        show_manual_start_instructions

        # LambdaËá™Âãï„Éá„Éó„É≠„Ç§Ôºà--db-only„É¢„Éº„Éâ„Åß„ÅØ„Çπ„Ç≠„ÉÉ„ÉóÔºâ
        # deploy_lambda_if_enabled

        echo ""
        echo "üõë To stop databases: $0 down"
        echo ""
        show_db_only_access_points
    fi
}

# ========================================
# „Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Éº„Éì„Çπ„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
# ========================================
check_db_services() {
    echo "üìä Checking services status..."

    # LocalStack„ÅÆÁ¢∫Ë™ç
    if curl -s "http://localhost:${DOCKER_LOCALSTACK_PORT}/_localstack/health" | grep -q "running"; then
        echo "  ‚úÖ LocalStack is running"
    else
        echo "  ‚ùå LocalStack is not responding"
    fi

    # PostgreSQL„ÅÆÁ¢∫Ë™ç
    if pg_isready -h localhost -p ${DOCKER_POSTGRES_PORT} > /dev/null 2>&1; then
        echo "  ‚úÖ PostgreSQL is ready"
    else
        echo "  ‚ö†Ô∏è  PostgreSQL is not responding"
    fi

    # DynamoDB Admin„ÅÆÁ¢∫Ë™ç
    if curl -s "http://localhost:${DOCKER_DYNAMODB_ADMIN_PORT}" > /dev/null 2>&1; then
        echo "  ‚úÖ DynamoDB Admin UI is available"
    else
        echo "  ‚ö†Ô∏è  DynamoDB Admin UI is not responding"
    fi
}

# ========================================
# ÊâãÂãïËµ∑ÂãïÊâãÈ†Ü„ÅÆË°®Á§∫
# ========================================
show_manual_start_instructions() {
    echo "üîß To start APIs manually:"
    echo "  1. Command API:"
    echo "     - From IntelliJ: Run 'io.github.j5ik2o.pcqrses.commandapi.Main'"
    echo "     - From sbt: sbt \"commandApi/run\""
    echo "  2. Query API:"
    echo "     - From IntelliJ: Run 'io.github.j5ik2o.pcqrses.queryapi.Main'"
    echo "     - From sbt: sbt \"queryApi/run\""
    echo ""
    echo "üí° Debug configuration for IntelliJ:"
    echo "  - Set these environment variables:"
    echo "    J5IK2O_DYNAMO_DB_JOURNAL_DYNAMO_DB_CLIENT_ENDPOINT=http://localhost:${DOCKER_LOCALSTACK_PORT}"
    echo "    J5IK2O_DYNAMO_DB_SNAPSHOT_DYNAMO_DB_CLIENT_ENDPOINT=http://localhost:${DOCKER_LOCALSTACK_PORT}"
    echo "    J5IK2O_DYNAMO_DB_STATE_DYNAMO_DB_CLIENT_ENDPOINT=http://localhost:${DOCKER_LOCALSTACK_PORT}"
    echo "    AWS_REGION=ap-northeast-1"
    echo "    AWS_ACCESS_KEY_ID=dummy"
    echo "    AWS_SECRET_ACCESS_KEY=dummy"
    echo "    PEKKO_CLUSTER_ENABLED=false"
}

# ========================================
# Lambda „Éá„Éó„É≠„Ç§Âá¶ÁêÜ
# ========================================
deploy_lambda_if_enabled() {
    if [ "$AUTO_DEPLOY" = true ]; then
        echo ""
        echo "ü™Ñ Deploying Lambda to LocalStack..."
        export PORT="$DOCKER_LOCALSTACK_PORT"
        tries=0; max_tries=10
        until ./scripts/deploy-lambda-localstack.sh; do
            tries=$((tries+1))
            if [ $tries -ge $max_tries ]; then
                echo "‚ùå Lambda deploy failed after ${max_tries} attempts" >&2
                break
            fi
            echo "‚è≥ Retry deploy in 3s... ($tries/$max_tries)"
            sleep 3
        done

        # LambdaÈñ¢Êï∞„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
        echo ""
        echo "‚è≥ Waiting for Lambda to be fully registered..."
        sleep 5
        echo "üìä Checking Lambda function status..."
        if ! check_lambda_status "pcqrses-read-model-updater" "http://localhost:${DOCKER_LOCALSTACK_PORT}"; then
            echo "‚ö†Ô∏è  Lambda function may not be ready yet, but continuing..."
        fi
    else
        echo "‚ÑπÔ∏è  Skipping Lambda auto-deploy (--no-deploy)"
    fi
}

# ========================================
# DB_ONLY„É¢„Éº„Éâ„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Éù„Ç§„É≥„ÉàË°®Á§∫
# ========================================
show_db_only_access_points() {
    echo "üìç Access points:"
    echo "  - PostgreSQL: localhost:${DOCKER_POSTGRES_PORT}"
    echo "  - DynamoDB Admin: http://localhost:${DOCKER_DYNAMODB_ADMIN_PORT}"
    echo "  - pgAdmin: http://localhost:${DOCKER_PGADMIN_PORT}"
    echo "  - LocalStack: http://localhost:${DOCKER_LOCALSTACK_PORT}"
    echo ""
    echo "üîÑ Read Model Updater (Lambda):"
    echo "  - Function: pcqrses-read-model-updater"
    echo "  - Trigger: DynamoDB Streams (automatic)"
    echo "  - Check status: aws lambda get-function --endpoint-url http://localhost:${DOCKER_LOCALSTACK_PORT} --function-name pcqrses-read-model-updater"
}

# ========================================
# Query API „ÅÆ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
# ========================================
check_query_api() {
    echo ""
    echo "üìä Checking Query API status..."
    if ! wait_for_http "Query API" "http://localhost:${DOCKER_QUERY_API_PORT}/api/health" "healthy" 120; then
        echo "‚ùå Query API failed to start within 120 seconds"
        echo "üìú Showing recent logs:"
        docker compose $1 logs --tail=50 query-api
        exit 1
    fi
}

# ========================================
# DynamoDB Admin UI „ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
# ========================================
check_dynamodb_admin() {
    if ! wait_for_http "DynamoDB Admin UI" "http://localhost:${DOCKER_DYNAMODB_ADMIN_PORT}" ".*" 30; then
        echo "  ‚ö†Ô∏è  DynamoDB Admin UI is not available (optional service)"
    fi
}

# ========================================
# ÂÖ±ÈÄö„Ç¢„ÇØ„Çª„Çπ„Éù„Ç§„É≥„ÉàË°®Á§∫
# ========================================
show_common_access_points() {
    echo "üìç Other services:"
    echo "  - Query GraphQL API: http://localhost:${DOCKER_QUERY_API_PORT}/api/graphql"
    echo "  - Query Health Check: http://localhost:${DOCKER_QUERY_API_PORT}/api/health"
    echo "  - Query GraphQL Playground: http://localhost:${DOCKER_QUERY_API_PORT}/api/graphql („Éñ„É©„Ç¶„Ç∂„ÅßÈñã„Åè)"
    echo "  - DynamoDB Admin: http://localhost:${DOCKER_DYNAMODB_ADMIN_PORT}"
    echo "  - pgAdmin: http://localhost:${DOCKER_PGADMIN_PORT}"
    echo "  - PostgreSQL: localhost:${DOCKER_POSTGRES_PORT}"
    echo "  - LocalStack: http://localhost:${DOCKER_LOCALSTACK_PORT}"
    echo ""
    echo "üîÑ Read Model Updater (Lambda):"
    echo "  - Function: pcqrses-read-model-updater"
    echo "  - Trigger: DynamoDB Streams (automatic)"
    echo "  - Check status: aws lambda get-function --endpoint-url http://localhost:${DOCKER_LOCALSTACK_PORT} --function-name pcqrses-read-model-updater"
}

# ========================================
# Docker„Ç§„É°„Éº„Ç∏„Éì„É´„Éâ„Å®Áí∞Â¢ÉÊ∫ñÂÇô
# ========================================
prepare_docker_environment() {
    local compose_files="$1"

    # Docker„Ç§„É°„Éº„Ç∏„ÅÆ„Éì„É´„Éâ
    echo "üèóÔ∏è  Building Docker images..."
    sbt dockerBuildAll

    # Êó¢Â≠ò„ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÇíÂÅúÊ≠¢„ÉªÂâäÈô§
    echo "üßπ Cleaning up existing containers..."
    docker compose $compose_files down
}

# ========================================
# „Çµ„Éº„Éì„ÇπËµ∑ÂãïÂæå„ÅÆÂÖ±ÈÄöÂá¶ÁêÜ
# ========================================
post_startup_tasks() {
    local compose_files="$1"

    echo ""
    echo "üéâ Services are running!"

    # LambdaËá™Âãï„Éá„Éó„É≠„Ç§
    deploy_lambda_if_enabled

    echo ""
    echo "üõë To stop: $0 down"
    echo ""
}
